import sys
import os
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

import logging
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
import aiocron

from services.notifier import send_daily_notifications, send_test_notification
from bot.handlers.register import (
    start_register, set_role, set_enlist_date, choose_discharge, set_custom_discharge
)
from bot.handlers.menu import handle_menu_choice, handle_notify_callback
from bot.states import RegisterStates

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è ===
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(name)s: %(message)s"
)

# === –ó–∞–≥—Ä—É–∑–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
load_dotenv()

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ===
bot = Bot(token=os.getenv("BOT_TOKEN"))
dp = Dispatcher(bot, storage=MemoryStorage())
bot["dispatcher"] = dp

# === –ê–¥–º–∏–Ω–∫–∞ ===
from bot.handlers.admin import register_admin_handlers
register_admin_handlers(dp)


# === FSM —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ===
dp.register_message_handler(set_role, state=RegisterStates.role)
dp.register_message_handler(set_enlist_date, state=RegisterStates.enlist_date)
dp.register_message_handler(choose_discharge, state=RegisterStates.discharge_choice)
dp.register_message_handler(set_custom_discharge, state=RegisterStates.discharge_custom)

# === –ö–æ–º–∞–Ω–¥—ã ===
@dp.message_handler(commands=["start"], state="*")
async def handle_start(message: types.Message, state: FSMContext):
    await start_register(message, state)

@dp.message_handler(commands=["help"], state="*")
async def handle_help(message: types.Message):
    await message.answer(
        "ü§ñ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:\n"
        "‚Ä¢ /start ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö\n"
        "‚Ä¢ üìã –ú–µ–Ω—é ‚Äî –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∏ –ø–æ–¥–ø–∏—Å–∫–∏\n"
        "‚Ä¢ /test_notify ‚Äî –ø—Ä–∏—Å–ª–∞—Ç—å –ø—Ä–∏–º–µ—Ä –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
        "‚Ä¢ /help ‚Äî —Å–ø—Ä–∞–≤–∫–∞"
    )

@dp.message_handler(commands=["test_notify"], state="*")
async def handle_test_notify(message: types.Message):
    await send_test_notification(bot, message.from_user.id)

# === –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö ===
@dp.message_handler(lambda msg: msg.text == "‚úçÔ∏è –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", state="*")
async def handle_update_data(message: types.Message, state: FSMContext):
    await start_register(message, state)

# === Callback-–∫–Ω–æ–ø–∫–∏ (–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏) ===
dp.register_callback_query_handler(handle_notify_callback, lambda c: c.data.startswith("set_notify_"))

# === –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ===
dp.register_message_handler(handle_menu_choice, state="*")

# === –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞: –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –≤ 09:00 ===
@aiocron.crontab("0 9 * * *")
async def daily_job():
    await send_daily_notifications(bot)

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
if __name__ == "__main__":
    from aiogram import executor
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É /start...")
    executor.start_polling(dp, skip_updates=True)
