import logging
from aiogram import types
from datetime import date

from bot.database.db import SessionLocal
from bot.models import User

logger = logging.getLogger(__name__)

def get_progress_bar(percent: float, length: int = 20) -> str:
    filled_length = int(length * percent)
    bar = '‚ñá' * filled_length + '‚ñë' * (length - filled_length)
    return f"{bar} {percent * 100:.1f}%"

async def status(message: types.Message):
    telegram_id = message.from_user.id
    session = SessionLocal()
    try:
        user = session.query(User).filter_by(telegram_id=telegram_id).first()
        if not user:
            await message.answer("–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start.")
            return

        today = date.today()
        total_days = (user.discharge_date - user.enlist_date).days
        passed_days = (today - user.enlist_date).days
        remaining_days = (user.discharge_date - today).days

        if passed_days < 0:
            await message.answer("–°–ª—É–∂–±–∞ –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å.")
            return

        if remaining_days < 0:
            await message.answer("–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã —É–∂–µ –¥–µ–º–æ–±–∏–ª–∏–∑–æ–≤–∞–ª–∏—Å—å! üéâ")
            return

        progress = passed_days / total_days if total_days else 0
        bar = get_progress_bar(progress)

        await message.answer(
            f"ü™ñ –ü—Ä–∏–∑—ã–≤: {user.enlist_date.strftime('%d.%m.%Y')}\n"
            f"üéñ –î–µ–º–±–µ–ª—å: {user.discharge_date.strftime('%d.%m.%Y')}\n\n"
            f"‚è≥ –ü—Ä–æ—à–ª–æ: {passed_days} –¥–Ω–µ–π\n"
            f"üìÖ –û—Å—Ç–∞–ª–æ—Å—å: {remaining_days} –¥–Ω–µ–π\n"
            f"{bar}"
        )

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–ª—É–∂–±—ã")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        session.close()
