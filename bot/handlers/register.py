import logging
from datetime import datetime, timedelta

from aiogram import types
from aiogram.dispatcher import FSMContext

from bot.keyboards.register_kb import role_kb, discharge_kb
from bot.states import RegisterStates
from bot.database.models import User
from bot.database.db import SessionLocal

logger = logging.getLogger(__name__)

# === –®–∞–≥ 1. –°—Ç–∞—Ä—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ===
async def start_register(message: types.Message, state: FSMContext):
    session = SessionLocal()
    telegram_id = message.from_user.id
    try:
        user = session.query(User).filter_by(telegram_id=telegram_id).one_or_none()

        if user:
            text = (
                f"–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.\n\n"
                f"ü™ñ –†–æ–ª—å: {user.role}\n"
                f"üìÖ –ü—Ä–∏–∑—ã–≤: {user.enlist_date.strftime('%d.%m.%Y')}\n"
                f"üéñ –î–µ–º–±–µ–ª—å: {user.discharge_date.strftime('%d.%m.%Y')}\n\n"
                f"–í—ã —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ?"
            )
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
            keyboard.add("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", "‚ùå –û—Ç–º–µ–Ω–∞")
            await message.answer(text, reply_markup=keyboard)
            await RegisterStates.role.set()
        else:
            await message.answer("–ö—Ç–æ –ø—Ä–æ—Ö–æ–¥–∏—Ç —Å–ª—É–∂–±—É?", reply_markup=role_kb())
            await RegisterStates.role.set()
    finally:
        session.close()

# === –®–∞–≥ 2. –í—ã–±–æ—Ä —Ä–æ–ª–∏ ===
async def set_role(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.finish()
        await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=types.ReplyKeyboardRemove())
        return

    if message.text == "üîÑ –û–±–Ω–æ–≤–∏—Ç—å":
        await message.answer("–ö—Ç–æ –ø—Ä–æ—Ö–æ–¥–∏—Ç —Å–ª—É–∂–±—É?", reply_markup=role_kb())
        return  # –æ—Å—Ç–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ RegisterStates.role

    await state.update_data(role=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø—Ä–∏–∑—ã–≤–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥", reply_markup=types.ReplyKeyboardRemove())
    await RegisterStates.enlist_date.set()

# === –®–∞–≥ 3. –í–≤–æ–¥ –¥–∞—Ç—ã –ø—Ä–∏–∑—ã–≤–∞ ===
async def set_enlist_date(message: types.Message, state: FSMContext):
    try:
        enlist_date = datetime.strptime(message.text, "%d.%m.%Y")
        await state.update_data(enlist_date=enlist_date)
        await message.answer("–ö–æ–≥–¥–∞ –¥–µ–º–±–µ–ª—å?", reply_markup=discharge_kb())
        await RegisterStates.discharge_choice.set()
    except ValueError:
        logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –ø—Ä–∏–∑—ã–≤–∞: {message.text}")
        await message.answer("–§–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–µ–Ω. –ü—Ä–∏–º–µ—Ä: 25.06.2024")

# === –®–∞–≥ 4. –í—ã–±–æ—Ä —Å—Ä–æ–∫–∞ —Å–ª—É–∂–±—ã ===
async def choose_discharge(message: types.Message, state: FSMContext):
    data = await state.get_data()
    enlist_date = data.get("enlist_date")

    discharge_map = {
        "üìÜ 6 –º–µ—Å—è—Ü–µ–≤": timedelta(days=183),
        "üìÜ 1 –≥–æ–¥": timedelta(days=365),
        "üìÜ 1.5 –≥–æ–¥–∞": timedelta(days=547),
    }

    if message.text in discharge_map:
        discharge_date = enlist_date + discharge_map[message.text]
        await save_user(message, state, discharge_date)
    elif message.text == "‚úçÔ∏è –°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –¥–µ–º–±–µ–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥")
        await RegisterStates.discharge_custom.set()
    else:
        logger.info(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–µ–º–±–µ–ª—è: {message.text}")
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")

# === –®–∞–≥ 5. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç —Å–≤–æ—é –¥–∞—Ç—É –¥–µ–º–±–µ–ª—è ===
async def set_custom_discharge(message: types.Message, state: FSMContext):
    try:
        discharge_date = datetime.strptime(message.text, "%d.%m.%Y")
        await save_user(message, state, discharge_date)
    except ValueError:
        logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –¥–µ–º–±–µ–ª—è: {message.text}")
        await message.answer("–§–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–µ–Ω. –ü—Ä–∏–º–µ—Ä: 25.06.2025")

# === –§–∏–Ω–∞–ª—å–Ω—ã–π —à–∞–≥. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î ===
async def save_user(message: types.Message, state: FSMContext, discharge_date: datetime):
    data = await state.get_data()
    telegram_id = message.from_user.id

    session = SessionLocal()
    try:
        user = session.query(User).filter_by(telegram_id=telegram_id).one_or_none()

        if user:
            user.role = data["role"]
            user.enlist_date = data["enlist_date"]
            user.discharge_date = discharge_date
            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
        else:
            user = User(
                telegram_id=telegram_id,
                role=data["role"],
                enlist_date=data["enlist_date"],
                discharge_date=discharge_date
            )
            session.add(user)
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id}")

        session.commit()
        await message.answer(f"–î–µ–º–±–µ–ª—å –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞: {discharge_date.strftime('%d.%m.%Y')}")
        await state.finish()

    except Exception:
        session.rollback()
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        session.close()
