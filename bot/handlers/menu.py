from aiogram import types
from datetime import date, datetime

from bot.database.db import SessionLocal
from bot.database.models import User
from bot.keyboards.subscribe_kb import subscription_modes_kb
from services.notifier import get_quote


# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ—á–Ω–æ–≥–æ –º–µ–Ω—é ===
async def handle_menu_choice(message: types.Message):
    session = SessionLocal()
    try:
        user = session.query(User).filter_by(telegram_id=message.from_user.id).first()

        if not user:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ /start.")
            return

        if message.text == "üìä –ú–æ–π —Å—Ç–∞—Ç—É—Å":
            await send_status(message, user)

        elif message.text == "üîî –ü–æ–¥–ø–∏—Å–∫–∞":
            keyboard = subscription_modes_kb(user.notify_mode)
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:", reply_markup=keyboard)

        elif message.text == "üí¨ –ß–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏":
            await message.answer(
                "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –Ω–∞—à–µ–º—É —á–∞—Ç—É! –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –æ–ø—ã—Ç–æ–º:\n\n"
                "üëâ https://t.me/+oW2QxTdb56tjYTQy"
            )

    finally:
        session.close()


# === –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ===
async def send_status(message: types.Message, user: User):
    enlist = user.enlist_date.strftime('%d.%m.%Y')
    discharge = user.discharge_date.strftime('%d.%m.%Y')
    today = date.today()

    total_days = (user.discharge_date - user.enlist_date).days
    passed_days = (today - user.enlist_date).days
    remaining_days = (user.discharge_date - today).days
    percent = (passed_days / total_days * 100) if total_days > 0 else 0

    # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
    bar_length = 20
    filled = round(bar_length * percent / 100)
    empty = bar_length - filled
    progress_bar = "‚ñÆ" * filled + "‚ñØ" * empty

    # –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
    notify_status = {
        None: "‚ùå –í—ã–∫–ª—é—á–µ–Ω—ã",
        "daily": "üìñ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ",
        "weekly": "üóì –†–∞–∑ –≤ –Ω–µ–¥–µ–ª—é",
        "milestones": "üìÜ –¢–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ –¥–∞—Ç—ã"
    }.get(user.notify_mode, "‚ùî –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

    # –¶–∏—Ç–∞—Ç–∞
    role_key = "serve" if user.role == "–Ø —Å–ª—É–∂—É" else "wait"
    try:
        quote = get_quote(remaining_days, role_key, datetime.today(), total_days)
        quote_line = f"\n\nüß† <i>{quote}</i>" if quote else ""
    except Exception:
        quote_line = ""

    text = (
        f"ü™ñ <b>–†–æ–ª—å:</b> {user.role}\n"
        f"üìÖ <b>–ü—Ä–∏–∑—ã–≤:</b> {enlist}\n"
        f"üéñ <b>–î–µ–º–±–µ–ª—å:</b> {discharge}\n\n"
        f"‚è≥ <b>–ü—Ä–æ—à–ª–æ:</b> {passed_days} –¥–Ω.\n"
        f"üß≠ <b>–û—Å—Ç–∞–ª–æ—Å—å:</b> {remaining_days} –¥–Ω.\n"
        f"üìä <b>–ü—Ä–æ–≥—Ä–µ—Å—Å:</b> {percent:.2f}%\n"
        f"{progress_bar}\n\n"
        f"üîî <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:</b> {notify_status}"
        f"{quote_line}"
    )

    await message.answer(text, parse_mode="HTML")


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∫–Ω–æ–ø–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏ ===
async def handle_notify_callback(call: types.CallbackQuery):
    session = SessionLocal()
    try:
        user = session.query(User).filter_by(telegram_id=call.from_user.id).first()

        mapping = {
            "set_notify_daily": "daily",
            "set_notify_weekly": "weekly",
            "set_notify_milestones": "milestones",
            "set_notify_off": None
        }

        mode = mapping.get(call.data)
        user.notify_mode = mode
        session.commit()

        name_map = {
            "daily": "üìñ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ",
            "weekly": "üóì –†–∞–∑ –≤ –Ω–µ–¥–µ–ª—é",
            "milestones": "üìÜ –¢–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ –¥–∞—Ç—ã",
            None: "‚ùå –í—ã–∫–ª—é—á–µ–Ω—ã"
        }

        await call.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
        await call.message.edit_text(f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {name_map[mode]}")

    finally:
        session.close()
